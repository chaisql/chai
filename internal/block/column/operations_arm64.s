//go:build !noasm && darwin && arm64
// AUTO-GENERATED BY GOCC -- DO NOT EDIT

TEXT ·int64_add_scalar(SB), $0-32
	MOVD a+0(FP), R0
	MOVD b+8(FP), R1
	MOVD result+16(FP), R2
	MOVD len+24(FP), R3
	WORD $0xa9bf7bfd       // stp	x29, x30, [sp, #-16]!
	WORD $0x910003fd       // mov	x29, sp
	WORD $0x7100047f       // cmp	w3, #1
	WORD $0x5400044b       // b.lt	LBB0_8
	WORD $0xd2800009       // mov	x9, #0
	WORD $0x2a0303e8       // mov	w8, w3
	WORD $0x7100207f       // cmp	w3, #8
	WORD $0x540002a3       // b.lo	LBB0_6
	WORD $0xcb00004a       // sub	x10, x2, x0
	WORD $0xf101015f       // cmp	x10, #64
	WORD $0x54000243       // b.lo	LBB0_6
	WORD $0x927d7109       // and	x9, x8, #0xfffffff8
	WORD $0x4e080c20       // dup.2d	v0, x1
	WORD $0x9100804a       // add	x10, x2, #32
	WORD $0x9100800b       // add	x11, x0, #32
	WORD $0xaa0903ec       // mov	x12, x9

BB0_4:
	WORD $0xad7f0961 // ldp	q1, q2, [x11, #-32]
	WORD $0xacc21163 // ldp	q3, q4, [x11], #64
	WORD $0x4ee08421 // add.2d	v1, v1, v0
	WORD $0x4ee08442 // add.2d	v2, v2, v0
	WORD $0x4ee08463 // add.2d	v3, v3, v0
	WORD $0x4ee08484 // add.2d	v4, v4, v0
	WORD $0xad3f0941 // stp	q1, q2, [x10, #-32]
	WORD $0xac821143 // stp	q3, q4, [x10], #64
	WORD $0xf100218c // subs	x12, x12, #8
	WORD $0x54fffee1 // b.ne	LBB0_4
	WORD $0xeb08013f // cmp	x9, x8
	WORD $0x54000140 // b.eq	LBB0_8

BB0_6:
	WORD $0xd37df12b // lsl	x11, x9, #3
	WORD $0x8b0b004a // add	x10, x2, x11
	WORD $0x8b0b000b // add	x11, x0, x11
	WORD $0xcb090108 // sub	x8, x8, x9

BB0_7:
	WORD $0xf8408569 // ldr	x9, [x11], #8
	WORD $0x8b010129 // add	x9, x9, x1
	WORD $0xf8008549 // str	x9, [x10], #8
	WORD $0xf1000508 // subs	x8, x8, #1
	WORD $0x54ffff81 // b.ne	LBB0_7

BB0_8:
	WORD $0xa8c17bfd // ldp	x29, x30, [sp], #16
	WORD $0xd65f03c0 // ret

TEXT ·int64_sub_scalar(SB), $0-32
	MOVD a+0(FP), R0
	MOVD b+8(FP), R1
	MOVD result+16(FP), R2
	MOVD len+24(FP), R3
	WORD $0xa9bf7bfd       // stp	x29, x30, [sp, #-16]!
	WORD $0x910003fd       // mov	x29, sp
	WORD $0x7100047f       // cmp	w3, #1
	WORD $0x5400044b       // b.lt	LBB1_8
	WORD $0xd2800009       // mov	x9, #0
	WORD $0x2a0303e8       // mov	w8, w3
	WORD $0x7100207f       // cmp	w3, #8
	WORD $0x540002a3       // b.lo	LBB1_6
	WORD $0xcb00004a       // sub	x10, x2, x0
	WORD $0xf101015f       // cmp	x10, #64
	WORD $0x54000243       // b.lo	LBB1_6
	WORD $0x927d7109       // and	x9, x8, #0xfffffff8
	WORD $0x4e080c20       // dup.2d	v0, x1
	WORD $0x9100804a       // add	x10, x2, #32
	WORD $0x9100800b       // add	x11, x0, #32
	WORD $0xaa0903ec       // mov	x12, x9

BB1_4:
	WORD $0xad7f0961 // ldp	q1, q2, [x11, #-32]
	WORD $0xacc21163 // ldp	q3, q4, [x11], #64
	WORD $0x6ee08421 // sub.2d	v1, v1, v0
	WORD $0x6ee08442 // sub.2d	v2, v2, v0
	WORD $0x6ee08463 // sub.2d	v3, v3, v0
	WORD $0x6ee08484 // sub.2d	v4, v4, v0
	WORD $0xad3f0941 // stp	q1, q2, [x10, #-32]
	WORD $0xac821143 // stp	q3, q4, [x10], #64
	WORD $0xf100218c // subs	x12, x12, #8
	WORD $0x54fffee1 // b.ne	LBB1_4
	WORD $0xeb08013f // cmp	x9, x8
	WORD $0x54000140 // b.eq	LBB1_8

BB1_6:
	WORD $0xd37df12b // lsl	x11, x9, #3
	WORD $0x8b0b004a // add	x10, x2, x11
	WORD $0x8b0b000b // add	x11, x0, x11
	WORD $0xcb090108 // sub	x8, x8, x9

BB1_7:
	WORD $0xf8408569 // ldr	x9, [x11], #8
	WORD $0xcb010129 // sub	x9, x9, x1
	WORD $0xf8008549 // str	x9, [x10], #8
	WORD $0xf1000508 // subs	x8, x8, #1
	WORD $0x54ffff81 // b.ne	LBB1_7

BB1_8:
	WORD $0xa8c17bfd // ldp	x29, x30, [sp], #16
	WORD $0xd65f03c0 // ret

TEXT ·int64_mul_scalar(SB), $0-32
	MOVD a+0(FP), R0
	MOVD b+8(FP), R1
	MOVD result+16(FP), R2
	MOVD len+24(FP), R3
	WORD $0xa9bf7bfd       // stp	x29, x30, [sp, #-16]!
	WORD $0x910003fd       // mov	x29, sp
	WORD $0x7100047f       // cmp	w3, #1
	WORD $0x5400070b       // b.lt	LBB2_8
	WORD $0xd2800009       // mov	x9, #0
	WORD $0x2a0303e8       // mov	w8, w3
	WORD $0x7100207f       // cmp	w3, #8
	WORD $0x54000563       // b.lo	LBB2_6
	WORD $0xcb00004a       // sub	x10, x2, x0
	WORD $0xf101015f       // cmp	x10, #64
	WORD $0x54000503       // b.lo	LBB2_6
	WORD $0x4e080c20       // dup.2d	v0, x1
	WORD $0x927d7109       // and	x9, x8, #0xfffffff8
	WORD $0x9100804a       // add	x10, x2, #32
	WORD $0x9100800b       // add	x11, x0, #32
	WORD $0x4e183c0c       // mov.d	x12, v0[1]
	WORD $0xaa0903ed       // mov	x13, x9

BB2_4:
	WORD $0xad7f0961 // ldp	q1, q2, [x11, #-32]
	WORD $0x4e183c2e // mov.d	x14, v1[1]
	WORD $0x9b0c7dce // mul	x14, x14, x12
	WORD $0x9e66002f // fmov	x15, d1
	WORD $0x9e660010 // fmov	x16, d0
	WORD $0x9b107def // mul	x15, x15, x16
	WORD $0x9e6701e1 // fmov	d1, x15
	WORD $0x4e181dc1 // mov.d	v1[1], x14
	WORD $0x4e183c4e // mov.d	x14, v2[1]
	WORD $0x9b0c7dce // mul	x14, x14, x12
	WORD $0x9e66004f // fmov	x15, d2
	WORD $0x9b107def // mul	x15, x15, x16
	WORD $0x9e6701e2 // fmov	d2, x15
	WORD $0x4e181dc2 // mov.d	v2[1], x14
	WORD $0xacc21163 // ldp	q3, q4, [x11], #64
	WORD $0x4e183c6e // mov.d	x14, v3[1]
	WORD $0x9b0c7dce // mul	x14, x14, x12
	WORD $0x9e66006f // fmov	x15, d3
	WORD $0x9b107def // mul	x15, x15, x16
	WORD $0x9e6701e3 // fmov	d3, x15
	WORD $0x4e181dc3 // mov.d	v3[1], x14
	WORD $0x4e183c8e // mov.d	x14, v4[1]
	WORD $0x9b0c7dce // mul	x14, x14, x12
	WORD $0x9e66008f // fmov	x15, d4
	WORD $0x9b107def // mul	x15, x15, x16
	WORD $0x9e6701e4 // fmov	d4, x15
	WORD $0x4e181dc4 // mov.d	v4[1], x14
	WORD $0xad3f0941 // stp	q1, q2, [x10, #-32]
	WORD $0xac821143 // stp	q3, q4, [x10], #64
	WORD $0xf10021ad // subs	x13, x13, #8
	WORD $0x54fffc41 // b.ne	LBB2_4
	WORD $0xeb08013f // cmp	x9, x8
	WORD $0x54000140 // b.eq	LBB2_8

BB2_6:
	WORD $0xd37df12b // lsl	x11, x9, #3
	WORD $0x8b0b004a // add	x10, x2, x11
	WORD $0x8b0b000b // add	x11, x0, x11
	WORD $0xcb090108 // sub	x8, x8, x9

BB2_7:
	WORD $0xf8408569 // ldr	x9, [x11], #8
	WORD $0x9b017d29 // mul	x9, x9, x1
	WORD $0xf8008549 // str	x9, [x10], #8
	WORD $0xf1000508 // subs	x8, x8, #1
	WORD $0x54ffff81 // b.ne	LBB2_7

BB2_8:
	WORD $0xa8c17bfd // ldp	x29, x30, [sp], #16
	WORD $0xd65f03c0 // ret

TEXT ·int64_div_scalar(SB), $0-32
	MOVD a+0(FP), R0
	MOVD b+8(FP), R1
	MOVD result+16(FP), R2
	MOVD len+24(FP), R3
	WORD $0xa9bf7bfd       // stp	x29, x30, [sp, #-16]!
	WORD $0x910003fd       // mov	x29, sp
	WORD $0x7100047f       // cmp	w3, #1
	WORD $0x5400048b       // b.lt	LBB3_8
	WORD $0xd2800009       // mov	x9, #0
	WORD $0x2a0303e8       // mov	w8, w3
	WORD $0x7100047f       // cmp	w3, #1
	WORD $0x540002e0       // b.eq	LBB3_6
	WORD $0xcb00004a       // sub	x10, x2, x0
	WORD $0xf100415f       // cmp	x10, #16
	WORD $0x54000283       // b.lo	LBB3_6
	WORD $0x4e080c20       // dup.2d	v0, x1
	WORD $0x927f7909       // and	x9, x8, #0xfffffffe
	WORD $0x4e183c0a       // mov.d	x10, v0[1]
	WORD $0xaa0903eb       // mov	x11, x9
	WORD $0xaa0203ec       // mov	x12, x2
	WORD $0xaa0003ed       // mov	x13, x0

BB3_4:
	WORD $0x3cc105a1 // ldr	q1, [x13], #16
	WORD $0x4e183c2e // mov.d	x14, v1[1]
	WORD $0x9aca0dce // sdiv	x14, x14, x10
	WORD $0x9e66000f // fmov	x15, d0
	WORD $0x9e660030 // fmov	x16, d1
	WORD $0x9acf0e0f // sdiv	x15, x16, x15
	WORD $0x9e6701e1 // fmov	d1, x15
	WORD $0x4e181dc1 // mov.d	v1[1], x14
	WORD $0x3c810581 // str	q1, [x12], #16
	WORD $0xf100096b // subs	x11, x11, #2
	WORD $0x54fffec1 // b.ne	LBB3_4
	WORD $0xeb08013f // cmp	x9, x8
	WORD $0x54000140 // b.eq	LBB3_8

BB3_6:
	WORD $0xd37df12b // lsl	x11, x9, #3
	WORD $0x8b0b004a // add	x10, x2, x11
	WORD $0x8b0b000b // add	x11, x0, x11
	WORD $0xcb090108 // sub	x8, x8, x9

BB3_7:
	WORD $0xf8408569 // ldr	x9, [x11], #8
	WORD $0x9ac10d29 // sdiv	x9, x9, x1
	WORD $0xf8008549 // str	x9, [x10], #8
	WORD $0xf1000508 // subs	x8, x8, #1
	WORD $0x54ffff81 // b.ne	LBB3_7

BB3_8:
	WORD $0xa8c17bfd // ldp	x29, x30, [sp], #16
	WORD $0xd65f03c0 // ret

TEXT ·int64_mod_scalar(SB), $0-32
	MOVD a+0(FP), R0
	MOVD b+8(FP), R1
	MOVD result+16(FP), R2
	MOVD len+24(FP), R3
	WORD $0xa9bf7bfd       // stp	x29, x30, [sp, #-16]!
	WORD $0x910003fd       // mov	x29, sp
	WORD $0x7100047f       // cmp	w3, #1
	WORD $0x5400082b       // b.lt	LBB4_8
	WORD $0xd2800009       // mov	x9, #0
	WORD $0x2a0303e8       // mov	w8, w3
	WORD $0x7100207f       // cmp	w3, #8
	WORD $0x54000663       // b.lo	LBB4_6
	WORD $0xcb00004a       // sub	x10, x2, x0
	WORD $0xf101015f       // cmp	x10, #64
	WORD $0x54000603       // b.lo	LBB4_6
	WORD $0x4e080c20       // dup.2d	v0, x1
	WORD $0x927d7109       // and	x9, x8, #0xfffffff8
	WORD $0x9100804a       // add	x10, x2, #32
	WORD $0x9100800b       // add	x11, x0, #32
	WORD $0x4e183c0c       // mov.d	x12, v0[1]
	WORD $0xaa0903ed       // mov	x13, x9

BB4_4:
	WORD $0xad7f0961 // ldp	q1, q2, [x11, #-32]
	WORD $0xacc21163 // ldp	q3, q4, [x11], #64
	WORD $0x4e183c2e // mov.d	x14, v1[1]
	WORD $0x9acc0dcf // sdiv	x15, x14, x12
	WORD $0x9e660030 // fmov	x16, d1
	WORD $0x9e660011 // fmov	x17, d0
	WORD $0x9b0cb9ee // msub	x14, x15, x12, x14
	WORD $0x9ad10e0f // sdiv	x15, x16, x17
	WORD $0x9b11c1ef // msub	x15, x15, x17, x16
	WORD $0x4e183c50 // mov.d	x16, v2[1]
	WORD $0x9acc0e03 // sdiv	x3, x16, x12
	WORD $0x9b0cc070 // msub	x16, x3, x12, x16
	WORD $0x9e660043 // fmov	x3, d2
	WORD $0x9ad10c64 // sdiv	x4, x3, x17
	WORD $0x9b118c83 // msub	x3, x4, x17, x3
	WORD $0x4e183c64 // mov.d	x4, v3[1]
	WORD $0x9e6701e1 // fmov	d1, x15
	WORD $0x9e670062 // fmov	d2, x3
	WORD $0x9acc0c8f // sdiv	x15, x4, x12
	WORD $0x9b0c91ef // msub	x15, x15, x12, x4
	WORD $0x9e660063 // fmov	x3, d3
	WORD $0x4e181dc1 // mov.d	v1[1], x14
	WORD $0x9ad10c6e // sdiv	x14, x3, x17
	WORD $0x9b118dce // msub	x14, x14, x17, x3
	WORD $0x4e183c83 // mov.d	x3, v4[1]
	WORD $0x4e181e02 // mov.d	v2[1], x16
	WORD $0x9e6701c3 // fmov	d3, x14
	WORD $0x9acc0c6e // sdiv	x14, x3, x12
	WORD $0x9b0c8dce // msub	x14, x14, x12, x3
	WORD $0x9e660090 // fmov	x16, d4
	WORD $0x4e181de3 // mov.d	v3[1], x15
	WORD $0x9ad10e0f // sdiv	x15, x16, x17
	WORD $0x9b11c1ef // msub	x15, x15, x17, x16
	WORD $0x9e6701e4 // fmov	d4, x15
	WORD $0x4e181dc4 // mov.d	v4[1], x14
	WORD $0xad3f0941 // stp	q1, q2, [x10, #-32]
	WORD $0xac821143 // stp	q3, q4, [x10], #64
	WORD $0xf10021ad // subs	x13, x13, #8
	WORD $0x54fffb41 // b.ne	LBB4_4
	WORD $0xeb08013f // cmp	x9, x8
	WORD $0x54000160 // b.eq	LBB4_8

BB4_6:
	WORD $0xd37df12b // lsl	x11, x9, #3
	WORD $0x8b0b004a // add	x10, x2, x11
	WORD $0x8b0b000b // add	x11, x0, x11
	WORD $0xcb090108 // sub	x8, x8, x9

BB4_7:
	WORD $0xf8408569 // ldr	x9, [x11], #8
	WORD $0x9ac10d2c // sdiv	x12, x9, x1
	WORD $0x9b01a589 // msub	x9, x12, x1, x9
	WORD $0xf8008549 // str	x9, [x10], #8
	WORD $0xf1000508 // subs	x8, x8, #1
	WORD $0x54ffff61 // b.ne	LBB4_7

BB4_8:
	WORD $0xa8c17bfd // ldp	x29, x30, [sp], #16
	WORD $0xd65f03c0 // ret

TEXT ·int32_add_scalar(SB), $0-32
	MOVD a+0(FP), R0
	MOVD b+8(FP), R1
	MOVD result+16(FP), R2
	MOVD len+24(FP), R3
	WORD $0xa9bf7bfd       // stp	x29, x30, [sp, #-16]!
	WORD $0x910003fd       // mov	x29, sp
	WORD $0x7100047f       // cmp	w3, #1
	WORD $0x5400044b       // b.lt	LBB5_8
	WORD $0xd2800009       // mov	x9, #0
	WORD $0x2a0303e8       // mov	w8, w3
	WORD $0x7100407f       // cmp	w3, #16
	WORD $0x540002a3       // b.lo	LBB5_6
	WORD $0xcb00004a       // sub	x10, x2, x0
	WORD $0xf101015f       // cmp	x10, #64
	WORD $0x54000243       // b.lo	LBB5_6
	WORD $0x927c6d09       // and	x9, x8, #0xfffffff0
	WORD $0x4e040c20       // dup.4s	v0, w1
	WORD $0x9100804a       // add	x10, x2, #32
	WORD $0x9100800b       // add	x11, x0, #32
	WORD $0xaa0903ec       // mov	x12, x9

BB5_4:
	WORD $0xad7f0961 // ldp	q1, q2, [x11, #-32]
	WORD $0xacc21163 // ldp	q3, q4, [x11], #64
	WORD $0x4ea08421 // add.4s	v1, v1, v0
	WORD $0x4ea08442 // add.4s	v2, v2, v0
	WORD $0x4ea08463 // add.4s	v3, v3, v0
	WORD $0x4ea08484 // add.4s	v4, v4, v0
	WORD $0xad3f0941 // stp	q1, q2, [x10, #-32]
	WORD $0xac821143 // stp	q3, q4, [x10], #64
	WORD $0xf100418c // subs	x12, x12, #16
	WORD $0x54fffee1 // b.ne	LBB5_4
	WORD $0xeb08013f // cmp	x9, x8
	WORD $0x54000140 // b.eq	LBB5_8

BB5_6:
	WORD $0xd37ef52b // lsl	x11, x9, #2
	WORD $0x8b0b004a // add	x10, x2, x11
	WORD $0x8b0b000b // add	x11, x0, x11
	WORD $0xcb090108 // sub	x8, x8, x9

BB5_7:
	WORD $0xb8404569 // ldr	w9, [x11], #4
	WORD $0x0b010129 // add	w9, w9, w1
	WORD $0xb8004549 // str	w9, [x10], #4
	WORD $0xf1000508 // subs	x8, x8, #1
	WORD $0x54ffff81 // b.ne	LBB5_7

BB5_8:
	WORD $0xa8c17bfd // ldp	x29, x30, [sp], #16
	WORD $0xd65f03c0 // ret

TEXT ·int32_sub_scalar(SB), $0-32
	MOVD a+0(FP), R0
	MOVD b+8(FP), R1
	MOVD result+16(FP), R2
	MOVD len+24(FP), R3
	WORD $0xa9bf7bfd       // stp	x29, x30, [sp, #-16]!
	WORD $0x910003fd       // mov	x29, sp
	WORD $0x7100047f       // cmp	w3, #1
	WORD $0x5400044b       // b.lt	LBB6_8
	WORD $0xd2800009       // mov	x9, #0
	WORD $0x2a0303e8       // mov	w8, w3
	WORD $0x7100407f       // cmp	w3, #16
	WORD $0x540002a3       // b.lo	LBB6_6
	WORD $0xcb00004a       // sub	x10, x2, x0
	WORD $0xf101015f       // cmp	x10, #64
	WORD $0x54000243       // b.lo	LBB6_6
	WORD $0x927c6d09       // and	x9, x8, #0xfffffff0
	WORD $0x4e040c20       // dup.4s	v0, w1
	WORD $0x9100804a       // add	x10, x2, #32
	WORD $0x9100800b       // add	x11, x0, #32
	WORD $0xaa0903ec       // mov	x12, x9

BB6_4:
	WORD $0xad7f0961 // ldp	q1, q2, [x11, #-32]
	WORD $0xacc21163 // ldp	q3, q4, [x11], #64
	WORD $0x6ea08421 // sub.4s	v1, v1, v0
	WORD $0x6ea08442 // sub.4s	v2, v2, v0
	WORD $0x6ea08463 // sub.4s	v3, v3, v0
	WORD $0x6ea08484 // sub.4s	v4, v4, v0
	WORD $0xad3f0941 // stp	q1, q2, [x10, #-32]
	WORD $0xac821143 // stp	q3, q4, [x10], #64
	WORD $0xf100418c // subs	x12, x12, #16
	WORD $0x54fffee1 // b.ne	LBB6_4
	WORD $0xeb08013f // cmp	x9, x8
	WORD $0x54000140 // b.eq	LBB6_8

BB6_6:
	WORD $0xd37ef52b // lsl	x11, x9, #2
	WORD $0x8b0b004a // add	x10, x2, x11
	WORD $0x8b0b000b // add	x11, x0, x11
	WORD $0xcb090108 // sub	x8, x8, x9

BB6_7:
	WORD $0xb8404569 // ldr	w9, [x11], #4
	WORD $0x4b010129 // sub	w9, w9, w1
	WORD $0xb8004549 // str	w9, [x10], #4
	WORD $0xf1000508 // subs	x8, x8, #1
	WORD $0x54ffff81 // b.ne	LBB6_7

BB6_8:
	WORD $0xa8c17bfd // ldp	x29, x30, [sp], #16
	WORD $0xd65f03c0 // ret

TEXT ·int32_mul_scalar(SB), $0-32
	MOVD a+0(FP), R0
	MOVD b+8(FP), R1
	MOVD result+16(FP), R2
	MOVD len+24(FP), R3
	WORD $0xa9bf7bfd       // stp	x29, x30, [sp, #-16]!
	WORD $0x910003fd       // mov	x29, sp
	WORD $0x7100047f       // cmp	w3, #1
	WORD $0x5400044b       // b.lt	LBB7_8
	WORD $0xd2800009       // mov	x9, #0
	WORD $0x2a0303e8       // mov	w8, w3
	WORD $0x7100407f       // cmp	w3, #16
	WORD $0x540002a3       // b.lo	LBB7_6
	WORD $0xcb00004a       // sub	x10, x2, x0
	WORD $0xf101015f       // cmp	x10, #64
	WORD $0x54000243       // b.lo	LBB7_6
	WORD $0x927c6d09       // and	x9, x8, #0xfffffff0
	WORD $0x4e040c20       // dup.4s	v0, w1
	WORD $0x9100804a       // add	x10, x2, #32
	WORD $0x9100800b       // add	x11, x0, #32
	WORD $0xaa0903ec       // mov	x12, x9

BB7_4:
	WORD $0xad7f0961 // ldp	q1, q2, [x11, #-32]
	WORD $0xacc21163 // ldp	q3, q4, [x11], #64
	WORD $0x4ea09c21 // mul.4s	v1, v1, v0
	WORD $0x4ea09c42 // mul.4s	v2, v2, v0
	WORD $0x4ea09c63 // mul.4s	v3, v3, v0
	WORD $0x4ea09c84 // mul.4s	v4, v4, v0
	WORD $0xad3f0941 // stp	q1, q2, [x10, #-32]
	WORD $0xac821143 // stp	q3, q4, [x10], #64
	WORD $0xf100418c // subs	x12, x12, #16
	WORD $0x54fffee1 // b.ne	LBB7_4
	WORD $0xeb08013f // cmp	x9, x8
	WORD $0x54000140 // b.eq	LBB7_8

BB7_6:
	WORD $0xd37ef52b // lsl	x11, x9, #2
	WORD $0x8b0b004a // add	x10, x2, x11
	WORD $0x8b0b000b // add	x11, x0, x11
	WORD $0xcb090108 // sub	x8, x8, x9

BB7_7:
	WORD $0xb8404569 // ldr	w9, [x11], #4
	WORD $0x1b017d29 // mul	w9, w9, w1
	WORD $0xb8004549 // str	w9, [x10], #4
	WORD $0xf1000508 // subs	x8, x8, #1
	WORD $0x54ffff81 // b.ne	LBB7_7

BB7_8:
	WORD $0xa8c17bfd // ldp	x29, x30, [sp], #16
	WORD $0xd65f03c0 // ret

TEXT ·int32_div_scalar(SB), $0-32
	MOVD a+0(FP), R0
	MOVD b+8(FP), R1
	MOVD result+16(FP), R2
	MOVD len+24(FP), R3
	WORD $0xa9bf7bfd       // stp	x29, x30, [sp, #-16]!
	WORD $0x910003fd       // mov	x29, sp
	WORD $0x7100047f       // cmp	w3, #1
	WORD $0x540000eb       // b.lt	LBB8_3
	WORD $0x2a0303e8       // mov	w8, w3

BB8_2:
	WORD $0xb8404409 // ldr	w9, [x0], #4
	WORD $0x1ac10d29 // sdiv	w9, w9, w1
	WORD $0xb8004449 // str	w9, [x2], #4
	WORD $0xf1000508 // subs	x8, x8, #1
	WORD $0x54ffff81 // b.ne	LBB8_2

BB8_3:
	WORD $0xa8c17bfd // ldp	x29, x30, [sp], #16
	WORD $0xd65f03c0 // ret

TEXT ·int32_mod_scalar(SB), $0-32
	MOVD a+0(FP), R0
	MOVD b+8(FP), R1
	MOVD result+16(FP), R2
	MOVD len+24(FP), R3
	WORD $0xa9bf7bfd       // stp	x29, x30, [sp, #-16]!
	WORD $0x910003fd       // mov	x29, sp
	WORD $0x7100047f       // cmp	w3, #1
	WORD $0x5400082b       // b.lt	LBB9_8
	WORD $0xd2800009       // mov	x9, #0
	WORD $0x2a0303e8       // mov	w8, w3
	WORD $0x7100207f       // cmp	w3, #8
	WORD $0x54000663       // b.lo	LBB9_6
	WORD $0xcb00004a       // sub	x10, x2, x0
	WORD $0xf100815f       // cmp	x10, #32
	WORD $0x54000603       // b.lo	LBB9_6
	WORD $0x0e040c20       // dup.2s	v0, w1
	WORD $0x927d7109       // and	x9, x8, #0xfffffff8
	WORD $0x9100404a       // add	x10, x2, #16
	WORD $0x9100400b       // add	x11, x0, #16
	WORD $0x0e0c3c0c       // mov.s	w12, v0[1]
	WORD $0xaa0903ed       // mov	x13, x9

BB9_4:
	WORD $0x6d7f0961 // ldp	d1, d2, [x11, #-16]
	WORD $0x0e0c3c2e // mov.s	w14, v1[1]
	WORD $0x6cc21163 // ldp	d3, d4, [x11], #32
	WORD $0x1acc0dcf // sdiv	w15, w14, w12
	WORD $0x1b0cb9ee // msub	w14, w15, w12, w14
	WORD $0x1e26002f // fmov	w15, s1
	WORD $0x1e260010 // fmov	w16, s0
	WORD $0x1ad00df1 // sdiv	w17, w15, w16
	WORD $0x1b10be2f // msub	w15, w17, w16, w15
	WORD $0x1e2701e1 // fmov	s1, w15
	WORD $0x4e0c1dc1 // mov.s	v1[1], w14
	WORD $0x0e0c3c4e // mov.s	w14, v2[1]
	WORD $0x1acc0dcf // sdiv	w15, w14, w12
	WORD $0x1b0cb9ee // msub	w14, w15, w12, w14
	WORD $0x1e26004f // fmov	w15, s2
	WORD $0x1ad00df1 // sdiv	w17, w15, w16
	WORD $0x1b10be2f // msub	w15, w17, w16, w15
	WORD $0x1e2701e2 // fmov	s2, w15
	WORD $0x4e0c1dc2 // mov.s	v2[1], w14
	WORD $0x0e0c3c6e // mov.s	w14, v3[1]
	WORD $0x1acc0dcf // sdiv	w15, w14, w12
	WORD $0x1b0cb9ee // msub	w14, w15, w12, w14
	WORD $0x1e26006f // fmov	w15, s3
	WORD $0x1ad00df1 // sdiv	w17, w15, w16
	WORD $0x1b10be2f // msub	w15, w17, w16, w15
	WORD $0x1e2701e3 // fmov	s3, w15
	WORD $0x4e0c1dc3 // mov.s	v3[1], w14
	WORD $0x0e0c3c8e // mov.s	w14, v4[1]
	WORD $0x1acc0dcf // sdiv	w15, w14, w12
	WORD $0x1b0cb9ee // msub	w14, w15, w12, w14
	WORD $0x1e26008f // fmov	w15, s4
	WORD $0x1ad00df1 // sdiv	w17, w15, w16
	WORD $0x1b10be2f // msub	w15, w17, w16, w15
	WORD $0x1e2701e4 // fmov	s4, w15
	WORD $0x4e0c1dc4 // mov.s	v4[1], w14
	WORD $0x6d3f0941 // stp	d1, d2, [x10, #-16]
	WORD $0x6c821143 // stp	d3, d4, [x10], #32
	WORD $0xf10021ad // subs	x13, x13, #8
	WORD $0x54fffb41 // b.ne	LBB9_4
	WORD $0xeb08013f // cmp	x9, x8
	WORD $0x54000160 // b.eq	LBB9_8

BB9_6:
	WORD $0xd37ef52b // lsl	x11, x9, #2
	WORD $0x8b0b004a // add	x10, x2, x11
	WORD $0x8b0b000b // add	x11, x0, x11
	WORD $0xcb090108 // sub	x8, x8, x9

BB9_7:
	WORD $0xb8404569 // ldr	w9, [x11], #4
	WORD $0x1ac10d2c // sdiv	w12, w9, w1
	WORD $0x1b01a589 // msub	w9, w12, w1, w9
	WORD $0xb8004549 // str	w9, [x10], #4
	WORD $0xf1000508 // subs	x8, x8, #1
	WORD $0x54ffff61 // b.ne	LBB9_7

BB9_8:
	WORD $0xa8c17bfd // ldp	x29, x30, [sp], #16
	WORD $0xd65f03c0 // ret
